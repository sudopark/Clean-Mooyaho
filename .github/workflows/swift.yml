name: Swift

on:
  pull_request:
    types: [opened]

jobs:
  test:
    name: Test
    runs-on: [self-hosted]
    # runs-on: macOS-latest
    strategy:
        matrix:
          xcode: [13.3]
          destination: ['platform=iOS Simulator,name=iPhone 11']
    
    steps:
      - run: swift --version
      - name: Checkout
        uses: actions/checkout@master

      - name: copy secret files
        run: |
          cp -i ../secrets.json ./MooyahoApp/MooyahoApp/Resources
      # - name: Cache Cocoapods
      #   uses: actions/cache@v1
      #   with: 
      #     path: Pods
      #     key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pods-

      # - name: Cache SPM
      #   uses: actions/cache@v1
      #   with:
      #     path: .build
      #     key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
      #     restore-keys: |
      #       ${{ runner.os }}-spm-

      - name: iOS App Unit Tests
        id: test_ios_app
        run: |
          xcodebuild clean test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme Mooyaho\ iOS \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: Member Scenes Unit Tests
        id: test_member_scenes
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme MemberScenes \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: ReadItem Scenes Unit Tests
        id: test_reads_scenes
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme ReadItemScene \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: EditReadItem Scenes Unit Tests
        id: test_edit_read_item_scenes
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme EditReadItemScene \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: Viewer Scenes Unit Tests
        id: test_viewer_scenes
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme ViewerScene \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: Discovery Scenes Unit Tests
        id: test_discovery_scenes
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme DiscoveryScene \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: Setting Scenes Unit Tests
        id: test_setting_scenes
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme SettingScene \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: Suggest Scenes Unit Tests
        id: test_suggest_scenes
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme SuggestScene \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: Domain Unit Tests
        id: test_domain
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme Domain \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}
          
          
      - name: DataStore Unit Tests
        id: test_data_store
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme DataStore \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: FirebaseService Unit Tests
        id: test_fb
        run: |
          xcodebuild test \
          -workspace Clean-Mooyaho-Codebase.xcworkspace \
          -scheme FirebaseService \
          -destination "${destination}" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO | xcpretty -c; echo "::set-output name=result::${PIPESTATUS[0]}"; echo "${PIPESTATUS[0]}"
        env: 
          destination: ${{ matrix.destination }}

      - name: Check Tests iOS App
        if: steps.test_ios_app.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests Member Scenes
        if: steps.test_member_scenes.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests ReadItem Scenes
        if: steps.test_reads_scenes.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests EditReadItem Scenes
        if: steps.test_edit_read_item_scenes.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests Viewer Scenes
        if: steps.test_viewer_scenes.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests Discovery Scenes
        if: steps.test_discovery_scenes.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests Setting Scenes
        if: steps.test_setting_scenes.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests Suggest Scenes
        if: steps.test_suggest_scenes.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1
      
      - name: Check Tests Domain
        if: steps.test_domain.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1
          
      - name: Check Tests DataStore
        if: steps.test_data_store.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1

      - name: Check Tests FirebaseService
        if: steps.test_fb.outputs.result != 0
        run: |
          echo "Tests Failed"; exit 1
